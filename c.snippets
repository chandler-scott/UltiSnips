snippet template "Template `main.c` file" b
/*
* Author: Chandler Scott
* Date: `date +"%m/%d/%Y"` 
* Description: ${3:Brief description of the program}
*/

#include <stdio.h>

int main(int argc, char *argv[]) {
	${4:// Your code here}

	return 0;
}
endsnippet

snippet header "Template C header file" b
/*
* Author: Chandler Scott
* Date: `date +"%m/%d/%Y"`
* Description: ${3:Brief description of the header file}
*/

#ifndef ${1:HEADER_NAME}_H
#define ${1:HEADER_NAME}_H

${2:// Function declarations and macros go here}

#endif // ${1:HEADER_NAME}_H
endsnippet

snippet func "C function template" b
/*
* Function: ${1:function_name}
* Description: ${2:Brief description of the function}
* Parameters:
*   ${3:param1} - ${4:Description of param1}
*   ${5:param2} - ${6:Description of param2}
* Returns: ${7:Return type and meaning}
*/
${7:void} ${1:function_name}(${8:void}) {
    ${9:// Your code here}
}
endsnippet

snippet struct "C struct template" b
/*
* Struct: ${1:StructName}
* Description: ${2:Brief description of the struct}
*/
typedef struct {
    ${3:int member1; /* Description of member1 */}
    ${4:char member2; /* Description of member2 */}
} ${1:StructName};
endsnippet

snippet for "For loop template" b
for (${1:int i = 0}; ${2:i < n}; ${3:i++}) {
    ${4:// Your code here}
}
endsnippet

snippet while "While loop template" b
while (${1:condition}) {
    ${2:// Your code here}
}
endsnippet

snippet error "Error handling template" b
if (${1:condition}) {
    fprintf(stderr, "Error: ${2:Error message}\\n");
    ${3:return -1;}
}
endsnippet

snippet malloc "Memory allocation template" b
${1:Type} *${2:ptr} = (${3:Type} *)malloc(${4:size} * sizeof(${5:Type}));
if (${6:ptr} == NULL) {
    fprintf(stderr, "Error: Memory allocation failed\\n");
    ${7:exit(EXIT_FAILURE);}
}
endsnippet

